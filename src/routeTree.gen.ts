/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TypographyImport } from './routes/typography'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as ComponentsImport } from './routes/components'
import { Route as ColorsImport } from './routes/colors'
import { Route as ButtonsImport } from './routes/buttons'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TypographyRoute = TypographyImport.update({
  id: '/typography',
  path: '/typography',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ComponentsRoute = ComponentsImport.update({
  id: '/components',
  path: '/components',
  getParentRoute: () => rootRoute,
} as any)

const ColorsRoute = ColorsImport.update({
  id: '/colors',
  path: '/colors',
  getParentRoute: () => rootRoute,
} as any)

const ButtonsRoute = ButtonsImport.update({
  id: '/buttons',
  path: '/buttons',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/buttons': {
      id: '/buttons'
      path: '/buttons'
      fullPath: '/buttons'
      preLoaderRoute: typeof ButtonsImport
      parentRoute: typeof rootRoute
    }
    '/colors': {
      id: '/colors'
      path: '/colors'
      fullPath: '/colors'
      preLoaderRoute: typeof ColorsImport
      parentRoute: typeof rootRoute
    }
    '/components': {
      id: '/components'
      path: '/components'
      fullPath: '/components'
      preLoaderRoute: typeof ComponentsImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/typography': {
      id: '/typography'
      path: '/typography'
      fullPath: '/typography'
      preLoaderRoute: typeof TypographyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/buttons': typeof ButtonsRoute
  '/colors': typeof ColorsRoute
  '/components': typeof ComponentsRoute
  '/dashboard': typeof DashboardRoute
  '/typography': typeof TypographyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/buttons': typeof ButtonsRoute
  '/colors': typeof ColorsRoute
  '/components': typeof ComponentsRoute
  '/dashboard': typeof DashboardRoute
  '/typography': typeof TypographyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/buttons': typeof ButtonsRoute
  '/colors': typeof ColorsRoute
  '/components': typeof ComponentsRoute
  '/dashboard': typeof DashboardRoute
  '/typography': typeof TypographyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/buttons'
    | '/colors'
    | '/components'
    | '/dashboard'
    | '/typography'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/buttons'
    | '/colors'
    | '/components'
    | '/dashboard'
    | '/typography'
  id:
    | '__root__'
    | '/'
    | '/buttons'
    | '/colors'
    | '/components'
    | '/dashboard'
    | '/typography'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ButtonsRoute: typeof ButtonsRoute
  ColorsRoute: typeof ColorsRoute
  ComponentsRoute: typeof ComponentsRoute
  DashboardRoute: typeof DashboardRoute
  TypographyRoute: typeof TypographyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ButtonsRoute: ButtonsRoute,
  ColorsRoute: ColorsRoute,
  ComponentsRoute: ComponentsRoute,
  DashboardRoute: DashboardRoute,
  TypographyRoute: TypographyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/buttons",
        "/colors",
        "/components",
        "/dashboard",
        "/typography"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/buttons": {
      "filePath": "buttons.tsx"
    },
    "/colors": {
      "filePath": "colors.tsx"
    },
    "/components": {
      "filePath": "components.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/typography": {
      "filePath": "typography.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
